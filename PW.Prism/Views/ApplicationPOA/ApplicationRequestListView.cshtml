@using PW.Ncels.Database.DataModel
@using PW.Ncels.Database.Models
@using PW.Ncels.Database.Recources
<!-- Список заявок на доверенность-->
@model Guid

<script type="text/javascript">
    var ApplicationRequestList = {
        recordVar: 0,
        _reload: function() {
            var grid = $('@("#gridApplicationRequestList" + Model)').data("kendoGrid");
            grid.dataSource.read();
        },
        _sync: function(e) {
            this.read();
        },
        printFn: function(e) {
            e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            if (dataItem.IsFullDelivery) {
                printDocumentTMC(dataItem.Id);
            } else {
                printDocumentTMC2(dataItem.Id);
            }
        },
        sendFn: function (e) {
            var grid = $('@("#gridApplicationRequestList" + Model)').data('kendoGrid');
            var selectedRow = grid.select();
            var dataItem = grid.dataItem(selectedRow);
            // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            if (dataItem) {
                var window = $("#CardCommandWindow");

                if (window.data("kendoWindow"))
                    window.data("kendoWindow").refresh();

                window.kendoWindow({
                    width: "550px",
                    height: "auto",
                    modal: true,
                    title: 'Отправить в 1С',
                    actions: ["Close"],
                    content: '@Url.Action("ItemsFor1CView","ApplicationPOA")?tmcInId=' +
                        dataItem.TmcInId +
                        '&containerId=CardCommandWindow'
                });
                window.data("kendoWindow").gridId = 'gridApplicationRequestList' + '@Model';
                //window.data("kendoWindow").refresh('@Url.Action("ItemsFor1CView","ApplicationPOA")?tmcInId=' + dataItem.TmcInId
                //    + '&containerId=TaskCommandWindow');
                //window.data("kendoWindow").refresh('/Tmc/SendOneS?id=' + dataItem.Id);

                window.data("kendoWindow").center();
                window.data("kendoWindow").open();
            } else {

            }
        },
        repealFn: function(e) {
            var grid = $('@("#gridApplicationRequestList" + Model)').data('kendoGrid');
            var selectedRow = grid.select();
            var dataItem = grid.dataItem(selectedRow);
            // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            if (dataItem) {
                var window = $("#TaskCommandWindow");

                if (window.data("kendoWindow"))
                    window.data("kendoWindow").refresh();

                window.kendoWindow({
                    width: "550px",
                    height: "auto",
                    modal: true,
                    title: 'Аннулировать',
                    actions: ["Close"],
                    content: '/Tmc/ConfirmDialog?Id=' +
                        dataItem.Id +
                        '&url=@Url.Action("ConfirmRepeal", "Tmc")' +
                        '&text=' +
                        'Аннулировать?'
                });
                window.data("kendoWindow").gridId = 'gridApplicationRequestList' + '@Model';
            //window.data("kendoWindow").refresh();

            window.data("kendoWindow").center();
            window.data("kendoWindow").open();
            }
        },
        expandDetailsHandler: function(e) {
            var dataItem = this.dataItem(e.masterRow);
            if (dataItem.StateType != @TmcIn.TmcInStatuses.New
                        && dataItem.StateType != @TmcIn.TmcInStatuses.Rejected
                        && dataItem.StateType != @TmcIn.TmcInStatuses.Repeal) {
                e.detailRow.find('.k-toolbar').hide();
            } else {
                e.detailRow.closest('.k-toolbar').show();
            }

            var g = $('#gridApplicationRequestListTemplate_' + dataItem.TmcInId + '_' + '@Model').data("kendoGrid");
            g.table.on("click",
                ".checkbox",
                function() {
                    ApplicationTmcList.selectRow(dataItem, this);
                });
        },
        dataBindingHandler: function(e) {
            ApplicationRequestList.recordVar = (this.dataSource.page() - 1) * this.dataSource.pageSize();
        },
        removeFn: function() {
            var grid = $('@("#gridApplicationRequestList" + Model)').data('kendoGrid');
            var selectedRow = grid.select();
            if (selectedRow)
                grid.removeRow(selectedRow);
        },
        editFn: function() {
            var grid = $('@("#gridApplicationRequestList" + Model)').data('kendoGrid');
            var selectedRow = grid.select();
            if (selectedRow)
                grid.editRow(selectedRow);
        },
        onEditFn: function(args) {
            if (!args.model.Id) {
                $("#attachFileHolder").hide();
                return;
            }

            $("#files").kendoUpload({
                localization: {
                    select: 'Выбрать файл...',
                    remove: '',
                    cancel: '',
                    headerStatusUploading: "Загрузка...",
                    headerStatusUploaded: "Загружено!"
                },
                success: function(e) {
                    args.model.set("AttachFiles", e.response.AttachFiles);
                    args.model.set("Id", e.response.Id);
                },
                files: args.model.AttachFiles,
                multiple: false,
                async: {
                    saveUrl: "/Upload/Save",
                    removeUrl: "/Upload/Remove",
                    autoUpload: true
                },
                upload: function(e) {
                    e.data = { documentId: args.model.Id };
                },
                remove: function(e) {
                    e.data = { documentId: args.model.Id };
                }
            });
        },
        onAdditionalData: function() {
            return {
                text: $("#ContractNumber").val()
            };
        },
        onChangeContractNumber: function(e) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetContractData", "ApplicationPOA")?contractNumber=' + e.sender.value(),
                success: function(result) {
                    $("#Provider").val(result.Name).change();
                    $("#ProviderBin").val(result.BIN).change();

                    //var NewDate = kendo.toString(this.value(), 'MM/dd/yyyy');
                    $("#ContractDate").data('kendoDatePicker').value(result.ContractDate);
                    $("#ContractDate").data("kendoDatePicker").trigger("change");
                    //$("#ContractDate").val();
                },
                complete: function() {

                }
            });
        },
        filesTemplate: function(files) {
            if (!files) return;
            var template = "<ul class='list-unstyled'>";
            for (var i = 0; i < files.length; i++) {
                template = template +
                    "<li><a href='#' onclick='fileDownload(\"" +
                    files[i].documentId +
                    "\",\"" +
                    files[i].name +
                    "\")'>" +
                    files[i].name +
                    "</li>";
            }
            return template + "</ul>";
        },
        renderNumber: function(data) {
            return ++ApplicationRequestList.recordVar;
        },
        changeHandler: function(e) {
            var model = this.dataItem(this.select());

            var editBtnId = '@("#custombtnEdit" + Model)';
            var deleteBtnId = '@("#custombtnDelete" + Model)';
            var sendBtnId = '@("#custombtnSendTo1c" + Model)';
            var repealBtnId = '@("#custombtnRepeal" + Model)';


            $(editBtnId).removeClass("k-state-disabled");
            $(deleteBtnId).removeClass("k-state-disabled");
            $(sendBtnId).removeClass("k-state-disabled");
            $(repealBtnId).removeClass("k-state-disabled");

            if (model.StateType != '@TmcIn.TmcInStatuses.New' &&
                model.StateType != '@TmcIn.TmcInStatuses.Rejected' &&
                model.StateType != '@TmcIn.TmcInStatuses.Repeal') {
                $(editBtnId).addClass("k-state-disabled");
                $(deleteBtnId).addClass("k-state-disabled");
                $(sendBtnId).addClass("k-state-disabled");
            }
            if (model.StateType != '@TmcIn.TmcInStatuses.Sended1C' &&
                model.StateType < '@TmcIn.TmcInStatuses.AgreedResearchCenter') {
                $(repealBtnId).addClass("k-state-disabled");
            }
        },
        changeContractDate: function(e) {
            var contractDate = this.value();
            if (contractDate) {
                contractDate = new Date(contractDate);
                contractDate.setDate(contractDate.getDate());
                if (LastDeliveryDate) {
                    var datePicker = $(LastDeliveryDate).data("kendoDatePicker");
                    datePicker.min(contractDate);
                }
            }
        },
        ondataBoundFn : function(e) {

        }
    }

    var ApplicationTmcList = {
        checkedIds: {},
        selectRow: function(e, chkBox) {
            var checked = chkBox.checked,
                row = $(chkBox).closest("tr"),
                grid = $('#gridApplicationRequestListTemplate_' + e.TmcInId + '_' + '@Model').data("kendoGrid"),
                dataItem = grid.dataItem(row);

            ApplicationTmcList.checkedIds[dataItem.Id] = dataItem.Number;
            var tmcViewModel = {
                Id: dataItem.Id,
                TmcInId: dataItem.TmcInId,
                IsSelected: checked
            };

            $.ajax({
                type: 'POST',
                url: '@Url.Action("SelectTmcItem", "ApplicationPOA")',
                data: tmcViewModel,
                success: function (result) {
                    if (checked) {
                        //-select the row
                        ApplicationTmcList.checkedIds[dataItem.Id] = dataItem.Number;
                        row.addClass("k-state-selected");
                    } else {
                        //-remove selection
                        delete ApplicationTmcList.checkedIds[dataItem.Id];
                        row.removeClass("k-state-selected");
                    }
                },
                complete: function () {

                }
            });

        },
        onDataBound: function (e) {
            debugger;
            var masterRow = this.wrapper.closest("tr.k-detail-row").prev(".k-master-row");
            var masterGrid = $("#gridApplicationRequestList" + "@Model").data("kendoGrid");
            var masterDataItem = masterGrid.dataItem(masterRow);


            var view = this.dataSource.view();
            for (var i = 0; i < view.length; i++) {
                //if (ApplicationTmcList.checkedIds[view[i].Id]) {
                var row = this.tbody.find("tr[data-uid='" + view[i].uid + "']");
                var chBox = row.find(".checkbox");
                var editBtn = row.find(".k-grid-edit");
                var deleteBtn = row.find(".k-grid-delete");

                if (view[i].IsSelected) {
                    row.addClass("k-state-selected");
                    chBox.attr("checked", "checked");
                }

                if (masterDataItem.StateType != @TmcIn.TmcInStatuses.New
                        && masterDataItem.StateType != @TmcIn.TmcInStatuses.Rejected
                        && masterDataItem.StateType != @TmcIn.TmcInStatuses.Repeal) {
                    chBox.addClass("k-state-disabled");
                    editBtn.addClass("k-state-disabled");
                    deleteBtn.addClass("k-state-disabled");
                }
            }
        }
    }
</script>

<div id="pwSix">
    @(Html.Kendo().Button().Name("reload" + Model)
        .HtmlAttributes(new { @class = "pwWidth100 pwButtonReload" }).Content("")
        .ImageUrl("/Content/images/reload.png"))
</div>

@(Html.Kendo().Grid<TmcInViewModel>()
      .Name("gridApplicationRequestList" + Model)
      .Columns(columns =>
      {
          columns.Command(command =>
          {
            command.Edit().UpdateText(Messages.Property_Сохранить_278__00).CancelText(Messages.Property_Отмена_352__00);
          //command.Destroy();
          //command.Custom("sendTo1c").Text("Отправить в 1С").Click("toSend");
          //command.Custom("repeal").Text("Аннулировать").Click("fnToRepeal");
          }).Width(0);
          columns.Command(command =>
          {
              command.Custom("print").Text("Печать").Click("ApplicationRequestList.printFn");
          }).Width(85);
          columns.Template(t => { }).Title("№ п/п").ClientTemplate("#= ApplicationRequestList.renderNumber(data) #").Width(40);
          columns.Bound(p => p.OwnerEmployeeValue).Title("ФИО МОЛ").Width(150);
          columns.Bound(p => p.ExecutorEmployeeValue).Title("Заявка на имя").Width(150);
          columns.Bound(p => p.AccountantEmployeeValue).Title("Бухгалтер").Width(150);
          columns.Bound(p => p.AgreementEmployeeValue).Title("Согласующий").Width(150);
          columns.Bound(p => p.Provider).Title("Наименование поставщика товара").Width(150); //.ClientFooterTemplate(PW.Ncels.Database.Recources.Messages.Property_Всего_356__00 + "#=count#");
          columns.Bound(p => p.ProviderBin).Title("БИН поставщика товара").Width(150);
          columns.Bound(p => p.ContractNumber).Title("Номер договора").Width(150);
          columns.Bound(p => p.ContractDate).Format("{0:dd.MM.yyyy}").Title("Дата договора").Width(150);
          columns.Bound(p => p.LastDeliveryDate).Format("{0:dd.MM.yyyy}").Title("Последний срок поставки по договору").Width(150);
          //columns.Bound(p => p.IsFullDeliveryValue).Title("Полная поставка (да/нет)").Width(150);
          columns.Bound(p => p.StateTypeValue).Filterable(false).Sortable(false).Title("Статус").Width(150);
          columns.Bound(p => p.DayCount).Title("Разница дней").Width(150);
          //columns.Bound(p => p.AttachFiles).ClientTemplate("#=ApplicationRequestList.filesTemplate(AttachFiles)#").Title("Скан документ").Width(150);
          columns.Bound(p => p.Comment).Title("Комментарий").Width(150);
      })
      .ColumnMenu(c => c.Columns(true))
      .Reorderable(reorder => reorder.Columns(true))
      .ToolBar(toolbar =>
      {
          toolbar.Create();
          toolbar.Custom().Name("btnEdit").Text("Редактировать").HtmlAttributes(new { Id = "custombtnEdit" + Model, @class = "k-state-disabled" });
          toolbar.Custom().Name("btnDelete").Text("Удалить").HtmlAttributes(new { Id = "custombtnDelete" + Model, @class = "k-state-disabled" });

          toolbar.Custom().HtmlAttributes(new { Id = "custombtnSplit", @class = "k-split-button" });

          toolbar.Custom().Name("btnSendTo1c").Text("Отправить в 1С").HtmlAttributes(new { Id = "custombtnSendTo1c" + Model, @class = "k-state-disabled" });
          toolbar.Custom().Name("btnRepeal").Text("Аннулировать").HtmlAttributes(new { Id = "custombtnRepeal" + Model, @class = "k-state-disabled" });
      })
      .Editable(editable => editable.Mode(GridEditMode.PopUp))
      .Groupable()
      .Filterable()
      .Sortable()
      .Pageable(c => c.Refresh(true))
      .Scrollable()
      .Selectable(c => c.Mode(GridSelectionMode.Single))
      .ClientDetailTemplateId("tmcRequestListTemplate")
      .HtmlAttributes(new { @class = "pwGrid" })
      .DataSource(dataSource => dataSource.Ajax()
          .Model(model =>
          {
              model.Id(p => p.Id);
              //model.Field(p => p.AttachFiles).DefaultValue(new List<UploadInitialFile>());
          })
          .PageSize(20)
          .Read(read => read.Action("ReadApplicationList", "ApplicationPOA", new { type = 0 }))
          .Update(update => update.Action("UpdateApplication", "ApplicationPOA"))
          .Destroy(destroy => destroy.Action("DestroyApplication", "ApplicationPOA"))
          .Create(create => create.Action("CreateApplication", "ApplicationPOA"))
          .Events(c =>
          {
              c.Sync("ApplicationRequestList._sync");
          }))
      .Resizable(s => s.Columns(true))
      .Events(c =>
      {
          c.DetailExpand("ApplicationRequestList.expandDetailsHandler");
          c.DataBinding("ApplicationRequestList.dataBindingHandler");
          c.Edit("ApplicationRequestList.onEditFn");
          c.Save("GeneralTmc.save");
          c.Change("ApplicationRequestList.changeHandler");
          //c.DetailExpand("ApplicationRequestList.expandDetailsHandler");
      }))

<script id="tmcRequestListTemplate" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<TmcViewModel>()
        .Name("gridApplicationRequestListTemplate_#=TmcInId#_" + Model) // template expression, to be evaluated in the master context
        .Columns(columns =>
        {
            columns.Command(command =>
            {
                command.Edit().UpdateText(Messages.Property_Сохранить_278__00);
                command.Destroy();
                //command.Custom("btnAdd").Text("Выбрать").HtmlAttributes(new { Id="custombtnAdd" });
            }).Width(100);
            columns.Bound(p => p.IsSelected).Title("").Filterable(false)
                .ClientTemplate("<input type='checkbox' class='checkbox' />").Width(30);
            columns.Bound(o => o.Name).Title("Наименование товара").Width(120);
            columns.Bound(o => o.MeasureTypeDicValue).Title("Единица измерения").Width(120);
            columns.Bound(o => o.Count).Title("Количество/объем по договору").Format("{0:n6}").Width(120);
            columns.Bound(o => o.CountRequest).Title("Количество/объем в заявке").Format("{0:n6}").Width(120);
            //columns.Bound(o => o.CountFact).Title("Количество/объем (факт)").Width(120);
        })
        .ToolBar(toolbar => { toolbar.Create(); })
        .HtmlAttributes(new { @class = "pwGrid" })
        .Editable(editable => editable.Mode(GridEditMode.PopUp))
        .Resizable(s => s.Columns(true))
        .Sortable()
        .Pageable(pb => pb.Refresh(true))
        .Selectable(c => c.Mode(GridSelectionMode.Multiple))
        .DataSource(dataSource => dataSource
                .Ajax()
                .Model(model =>
                {
                    model.Id(p => p.Id);
                    model.Field(p => p.TmcInIdString).DefaultValue("#=TmcInId#");
                })
                .PageSize(20)
                .Read(read => read.Action("ReadTmcList", "ApplicationPOA", new { tmcInId = "#=TmcInId#" }))
                .Update(update => update.Action("UpdateTmc", "ApplicationPOA"))
                .Destroy(destroy => destroy.Action("DestroyTmc", "ApplicationPOA"))
                .Create(create => create.Action("CreateTmc", "ApplicationPOA")))
        .Events(c =>
        {
            c.Save("GeneralTmc.save");
            c.DataBound("ApplicationTmcList.onDataBound");
        })
        .ToClientTemplate()
    )
</script>

<script>
    (function() {
        resizeGrid3('@("#gridApplicationRequestList" + Model)', 120);

        $('@("#reload" + Model)').click(function(e) {
            ApplicationRequestList._reload();
        });

        $('@("#custombtnEdit" + Model)').click(function (e) {
            e.preventDefault();
            ApplicationRequestList.editFn();
            return false;
        });

        $('@("#custombtnDelete" + Model)').click(function (e) {
            e.preventDefault();
            ApplicationRequestList.removeFn();
            return false;
        });

        $('@("#custombtnSendTo1c" + Model)').click(function (e) {
            e.preventDefault();
            ApplicationRequestList.sendFn();
            return false;
        });

        $('@("#custombtnRepeal" + Model)').click(function (e) {
            e.preventDefault();
            ApplicationRequestList.repealFn();
            return false;
        });
    })();
</script>

