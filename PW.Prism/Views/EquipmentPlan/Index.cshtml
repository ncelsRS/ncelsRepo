@using PW.Ncels.Database.DataModel
@using PW.Ncels.Database.Models
@using PW.Ncels.Database.Recources
<!-- Список Планов -->
@model Guid
<style>
    .k-state-disabled {
        pointer-events: none;
    }
</style>
<script>
    var EquipmentPlanList = {
        _reload: function () {
            var grid = $('@("#gridEquipment_" + Model)').data("kendoGrid");
            grid.dataSource.read();
        },
        sync: function(e) {
            this.read();
        },
        detailExpand: function(e) {
            var eid = e.masterRow[0].rowIndex;
        },
        detailCollapse: function(e) {
            var eid = e.masterRow[0].rowIndex;
        },
        onEditHandler: function(e) {
            debugger;
            if (e.model.isNew()) {
                var yearVal = '@DateTime.Now.Year';
                // var model = $('@("#gridEquipmentPlan_" + Model)').data().kendoGrid.editable.options.model;

                var planType = e.container.find("[name='PlanTypeId']").data("kendoComboBox");
                planType.value('@ViewBag.PlanType');
                //planType.trigger("change");

                var yearControl = e.container.find("[name='Year']").data("kendoNumericTextBox");
                yearControl.value(yearVal);

                //model.set('PlanTypeId', '@ViewBag.PlanType');
                e.model.PlanTypeId = '@ViewBag.PlanType';
                e.model.Year = yearVal;
            }
        },
        onEditChildHandler: function(e) {
            debugger;
            if (e.model.isNew()) {
                var equipmentDValue = '@ViewBag.EquipmentDefaultId';
                var equipment = e.container.find("[name='EquipmentId']").data("kendoComboBox");
                equipment.value(equipmentDValue);
                e.model.EquipmentId = equipmentDValue;
            }
            var masterRow = this.wrapper.closest("tr.k-detail-row").prev(".k-master-row");
            var grid = $('@("#gridEquipmentPlan_" + Model)').data("kendoGrid");
            var equipmentPlan = grid.dataItem(masterRow);

            e.model.EquipmentPlanId = equipmentPlan.Id;
        },
        printFn: function (e) {
            e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var reportType = '';
            if (dataItem.PlanTypeCode == '@Dictionary.DicEquipmentPlanType.QualificationPlan') {
                reportType = 'EquipmentQualificationPlan.mrt';
            }
            else if (dataItem.PlanTypeCode == '@Dictionary.DicEquipmentPlanType.PreventiveWorkPlan') {
                reportType = 'EquipmentPreventiveWorkPlan.mrt';
            }
            else if (dataItem.PlanTypeCode == '@Dictionary.DicEquipmentPlanType.CheckPlan') {
                reportType = 'EquipmentCheckPlan.mrt';
            }

            var window = $("#windowFile");
            window.kendoWindow({
                width: "800px",
                height: "500px",
                modal: true,
                resizable: false,
                title: 'Печать',
                actions: ["Pin", "Refresh", "Maximize", "Close"],
                content: "/Upload/ReportFileView?code=" + dataItem.Id + '&name=Форма&report=' + reportType
            });
            window.data("kendoWindow").title('Форма');
            window.data("kendoWindow").center();
            window.data("kendoWindow").open();
        }
    };
</script>

<div id="pwSix">
    @(Html.Kendo().Button().Name("reload" + Model)
            .HtmlAttributes(new { @class = "pwWidth100 pwButtonReload" }).Content("")
            .ImageUrl("/Content/images/reload.png"))
</div>

@(Html.Kendo().Splitter()
            .HtmlAttributes(new { @class = "pwSplitter k-block" })
            .Name(("splitter" + Model))
            .Panes(panes =>
            {
                panes.Add()
                .Size("250px")
                .Collapsible(true)
                .MaxSize("500px")
                .MinSize("250px")
                .Content(
                    @<div class="pwPanelBar">
                        @(Html.Kendo().PanelBar().HtmlAttributes(new { @class = "pwPanelBar" })
                                   .Name("panelbar" + Model)
                                   .ExpandMode(PanelBarExpandMode.Multiple)
                                   .ExpandAll(true)
                                   .HtmlAttributes(new { style = "width:auto;" })
                                   //.Events(e => e.Select("panelEqLabSelect"))
                                   .Items(panelbar =>
                                   {
                                       panelbar.Add().Expanded(true);
                                       panelbar.Add().Text("По видам")
                                           .Items(panelbarItem =>
                                           {
                                               panelbarItem.Add().Text("Все")
                                                   .LinkHtmlAttributes(new Dictionary<string, object>()
                                                   {
                                                       { "ItemType", "" },
                                                       { "ModelId", Model.ToString() }
                                                   });
                                               foreach (Item itemInfo in (List<Item>)ViewBag.EquipmentPlanType)
                                               {
                                                   panelbarItem.Add().Text(itemInfo.Name)
                                                       .LinkHtmlAttributes(new Dictionary<string, object>()
                                                       {
                                                           { "ItemType", itemInfo.Id },
                                                           { "ModelId", Model.ToString() }
                                                       });
                                               }
                                           });
                                   })
                        )
                    </div>
                );

                panes.Add().Scrollable(false).Size("100%").Content(
                    @<div class="pwPanelBar">
                        <div class="pwBlockAdd k-block">
                            <div id="pwOne">
                                @(Html.Kendo().MaskedTextBox().Name("findText" + Model).Mask("")
                                    .HtmlAttributes(new { @class = "pwWidth100" }))
                            </div>

                            <div id="pwTwo">

                            </div>

                            <div id="pwThree">
                                @(Html.Kendo().Button().Name("find" + Model).HtmlAttributes(new { @class = "pwWidth100" })
                                      .Content(Messages.Property_Найти_372__00)
                                      .ImageUrl("/Content/images/find.png"))
                            </div>
                        </div>
                        <div id="pwSix">

                        </div>
                        @(Html.Kendo().Grid<LimsEquipmentPlan>()
                            .Name("gridEquipmentPlan_" + Model)
                            .Columns(columns =>
                            {
                                columns.Command(command =>
                                {
                                    command.Edit().UpdateText(Messages.Property_Сохранить_278__00);
                                    command.Destroy();
                                    command.Custom("btnPrint" + Model).Text("Печать").Click("EquipmentPlanList.printFn");
                                }).Width(200);
                                columns.Bound(p => p.PlanTypeName).Title("План").Width(150);
                                columns.Bound(p => p.Year).Title("Год").Filterable(false).Sortable(false).Width(150);
                                columns.Bound(p => p.CreateDate).Format("{0:dd.MM.yyyy}").Title("Дата").Width(150);
                            })
                            .ToolBar(c => c.Create())
                            .ColumnMenu(c => c.Columns(true))
                            .Reorderable(reorder => reorder.Columns(true))
                            .Editable(e => e.Mode(GridEditMode.PopUp))
                            .Groupable()
                            .Filterable()
                            .Sortable()
                            .Pageable(c => c.Refresh(true))
                            .Scrollable()
                            .ClientDetailTemplateId("templatePlan")
                            .HtmlAttributes(new { @class = "pwGrid" })
                            .DataSource(dataSource => dataSource.Ajax().Model(model => { model.Id(p => p.Id); })
                                .PageSize(20)
                                .Read(read => read.Action("ReadEquipmentPlanList", "EquipmentPlan"))
                                .Update(update => update.Action("UpdateEquipmentPlan", "EquipmentPlan"))
                                .Destroy(destroy => destroy.Action("DestroyEquipmentPlan", "EquipmentPlan"))
                                .Create(create => create.Action("CreateEquipmentPlan", "EquipmentPlan"))
                                .Events(c =>
                                {
                                    c.Sync("EquipmentPlanList.sync");
                                })
                            )
                            .Events(c =>
                            {
                                c.DetailExpand("EquipmentPlanList.detailExpand");
                                c.DetailCollapse("EquipmentPlanList.detailCollapse");
                                c.Edit("EquipmentPlanList.onEditHandler");
                            })
                            .Resizable(s => s.Columns(true))
                        )
                    </div>
                );
            }))
<script id="templatePlan" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<LimsPlanEquipmentLink>()
          .Name("gridEqAct_#=Id#") // template expression, to be evaluated in the master context
          .Columns(columns =>
          {
              columns.Command(command =>
              {
                  command.Edit().UpdateText(Messages.Property_Сохранить_278__00);
                  //command.Custom("btn-edit").HtmlAttributes(new { @class = "k-button k-button-icontext k-grid-edit" }).Text("Изменить").Click("EquipmentList.editFn");
                  command.Destroy();
              }).Width(100);
              columns.Bound(o => o.LimsEquipmentName).Title("Наименование").Width(120);
              columns.Bound(p => p.TermDate).Format("{0:dd.MM.yyyy}").Title("Срок").Width(150);
              columns.Bound(o => o.CreateDate).Format("{0:dd.MM.yyyy}").Title("Дата").Width(120);
          })
          .ToolBar(config =>
          {
              config.Create();
          })
          .HtmlAttributes(new { @class = "pwGrid" })
          .DataSource(dataSource => dataSource
              .Ajax().Model(model =>
              {
                  model.Id(p => p.Id);
              })
              .PageSize(20)
              .Read(read => read.Action("ReadPlanEquipmentList", "EquipmentPlan", new { eqipmentPlanId = "#=Id#" }))
              .Update(update => update.Action("UpdatePlanEquipment", "EquipmentPlan"))
              .Destroy(destroy => destroy.Action("DestroyPlanEquipment", "EquipmentPlan"))
              .Create(create => create.Action("CreatePlanEquipment", "EquipmentPlan"))
              .Events(c =>
              {
                  c.Sync("EquipmentPlanList.sync");
              })
          )
          .Sortable()
          .Editable(c => c.Mode(GridEditMode.PopUp))
          .Resizable(s => s.Columns(true))
          .Pageable(p => p.Refresh(true))
          .Events(c =>
          {
              c.Edit("EquipmentPlanList.onEditChildHandler");
          })
          .ToClientTemplate())
</script>

<script>
    (function() {
        resizeGrid3('@("#gridEquipmentPlan_" + Model)', 165);

        $('@("#reload" + Model)').click(function (e) {
            var grid = $('@("#gridEquipmentPlan_" + Model)').data("kendoGrid");
            grid.dataSource.read();
        });

    })();
</script>

