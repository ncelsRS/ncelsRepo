@using PW.Ncels.Database.Helpers
@using PW.Ncels.Database.DataModel
@model Guid

<script>
    InitFilterContractAllGrid('@Model.ToString()');
</script>

@(Html.Kendo().Splitter()
            .HtmlAttributes(new { @class = "pwSplitter k-block" })
            .Name(("splitter" + Model))
            .Panes(panes =>
            {
            panes.Add()
                .Size("300px")
                .Collapsible(true)
                .MaxSize("500px")
                .MinSize("300px")
                .Content(
                @<div class="pwPanelBar">
                    @(Html.Kendo().PanelBar().HtmlAttributes(new { @class = "pwPanelBar" })
                               .Name("panelbar" + Model)
                               .ExpandMode(PanelBarExpandMode.Multiple)
                               .ExpandAll(true)
                               .HtmlAttributes(new { style = "width:auto;" })
                               .Events(e => e.Select("panelContractSelect"))
                               .Items(panelbar =>
                               {
                                   panelbar.Add().Expanded(true);
                                   panelbar.Add().Text(PW.Ncels.Database.Recources.Messages.Property_Постатусу_262__00)
                                                                   .Items(projects =>
                                                                   {
                                                                       if ((bool)ViewBag.IsProcHeadContract)
                                                                           projects.Add().Text(PW.Ncels.Database.Recources.Messages.ContractsInQueue)
                                                                               .Selected(ViewBag.FilterId == "inQueueContracts")
                                                                               .LinkHtmlAttributes(new Dictionary<string, object>()
                                                                               {
                                                                                   { "ItemId", Contract.StatusInQueue },
                                                                                   { "ItemType", "StatusCode" },
                                                                                   { "ModelId", Model.ToString() }, { "id", "inQueueContracts" + Model.ToString() }
                                                                               });
                                                                       projects.Add().Text(PW.Ncels.Database.Recources.Messages.ContractsInWork)
                                                                           .Selected(ViewBag.FilterId == "inWorkContracts")
                                                                           .LinkHtmlAttributes(new Dictionary<string, object>()
                                                                           {
                                                                               { "ItemId", Contract.StatusInWork },
                                                                               { "ItemType", "StatusCode" },
                                                                               { "ModelId", Model.ToString() },
                                                                               {"id", "inWorkContracts"+ Model.ToString() }
                                                                           });
                                                                       projects.Add().Text(PW.Ncels.Database.Recources.Messages.ContractsOnCorrection)
                                                                           .Selected(ViewBag.FilterId == "onCorrectionContracts")
                                                                           .LinkHtmlAttributes(new Dictionary<string, object>()
                                                                           {
                                                                               { "ItemId", Contract.StatusOnCorrection },
                                                                               { "ItemType", "StatusCode" },
                                                                               { "ModelId", Model.ToString() },
                                                                               {"id", "onCorrectionContracts"+ Model.ToString() }
                                                                           });
                                                                       projects.Add().Text(PW.Ncels.Database.Recources.Messages.ContractsCorrected)
                                                                           .Selected(ViewBag.FilterId == "correctedContracts")
                                                                           .LinkHtmlAttributes(new Dictionary<string, object>()
                                                                           {
                                                                               { "ItemId", Contract.StatusCorrected },
                                                                               { "ItemType", "StatusCode" },
                                                                               { "ModelId", Model.ToString() },
                                                                               {"id", "correctedContracts"+ Model.ToString() }
                                                                           });
                                                                       projects.Add().Text(PW.Ncels.Database.Recources.Messages.ContractsOnAgreement)
                                                                           .Selected(ViewBag.FilterId == "onAgreementContracts")
                                                                           .LinkHtmlAttributes(new Dictionary<string, object>()
                                                                           {
                                                                               { "ItemId", Contract.StatusOnAgreement },
                                                                               { "ItemType", "StatusCode" },
                                                                               { "ModelId", Model.ToString() },
                                                                               {"id", "onAgreementContracts"+ Model.ToString() }
                                                                           });
                                                                       projects.Add().Text(PW.Ncels.Database.Recources.Messages.ContractApproved)
                                                                           .Selected(ViewBag.FilterId == "approvedContracts")
                                                                           .LinkHtmlAttributes(new Dictionary<string, object>()
                                                                           {
                                                                               { "ItemId", Contract.StatusApproved },
                                                                               { "ItemType", "StatusCode" },
                                                                               { "ModelId", Model.ToString() },
                                                                               {"id", "approvedContracts"+ Model.ToString() }
                                                                           });
                                                                       projects.Add().Text(PW.Ncels.Database.Recources.Messages.ContractsOnApplicantSigningt)
                                                                           .Selected(ViewBag.FilterId == "onApplicantSigningContracts")
                                                                           .LinkHtmlAttributes(new Dictionary<string, object>()
                                                                           {
                                                                               { "ItemId", Contract.StatusOnApplicantSigningt },
                                                                               { "ItemType", "StatusCode" },
                                                                               { "ModelId", Model.ToString() },
                                                                               {"id", "onApplicantSigningContracts"+ Model.ToString() }
                                                                           });
                                                                       projects.Add().Text(PW.Ncels.Database.Recources.Messages.ContractsOnSigning)
                                                                           .Selected(ViewBag.FilterId == "onSigningContracts")
                                                                           .LinkHtmlAttributes(new Dictionary<string, object>()
                                                                           {
                                                                               { "ItemId", Contract.StatusOnSigning },
                                                                               { "ItemType", "StatusCode" },
                                                                               { "ModelId", Model.ToString() },
                                                                               {"id", "onSigningContracts"+ Model.ToString() }
                                                                           });
                                                                       projects.Add().Text(PW.Ncels.Database.Recources.Messages.ContractOnRegistration)
                                                                           .Selected(ViewBag.FilterId == "onRegistrationContracts")
                                                                           .LinkHtmlAttributes(new Dictionary<string, object>()
                                                                           {
                                                                               { "ItemId", Contract.StatusOnRegistration },
                                                                               { "ItemType", "StatusCode" },
                                                                               { "ModelId", Model.ToString() },
                                                                               {"id", "onRegistrationContracts"+ Model.ToString() }
                                                                           });
                                                                       projects.Add().Text("Активные")
                                                                           .Selected(ViewBag.FilterId == "activeContracts")
                                                                           .LinkHtmlAttributes(new Dictionary<string, object>()
                                                                           {
                                                                               { "ItemId", Contract.StatusActive },
                                                                               { "ItemType", "StatusCode" },
                                                                               { "ModelId", Model.ToString() },
                                                                               {"id", "activeContracts"+ Model.ToString() }
                                                                           });
                                                                   });

                               })
                    )
                </div>
                );

panes.Add().Scrollable(false).Size("100%").Content(
    @<div class="pwPanelBar">
        <div class="pwBlockAdd k-block">
            <div id="pwOne">
                @(Html.Kendo().MaskedTextBox().Name("findText" + Model).Mask("").HtmlAttributes(new { @class = "pwWidth100" }))
            </div>
            <div id="pwTwo">
                @(Html.Kendo().DropDownList().Name("findType" + Model).HtmlAttributes(new { @class = "pwWidth100" })
                                   .DataTextField("Text")
                                   .DataValueField("Value")
                                   .BindTo(new List<SelectListItem>() {
                                       new SelectListItem() {
                                           Text = PW.Ncels.Database.Recources.Messages.Property_Все_394__00, Value = "0"
                                       },
                                       new SelectListItem() {
                                           Text = PW.Ncels.Database.Recources.Messages.Property_Пономеру_281__00, Value = "1"
                                       },
                                       new SelectListItem() {
                                           Text = PW.Ncels.Database.Recources.Messages.Property_Поисполнителю_170__00, Value = "2"
                                       },
                                       new SelectListItem() {
                                           Text = PW.Ncels.Database.Recources.Messages.Property_Поотправителю_171__00, Value = "3"
                                       }
                                   })
                                   .SelectedIndex(0)
                )
            </div>
            <div id="pwThree">
                @(Html.Kendo().Button().Name("find" + Model).HtmlAttributes(new { @class = "pwWidth100" })
                                   .Content(PW.Ncels.Database.Recources.Messages.Property_Найти_372__00)
                                   .ImageUrl("/Content/images/find.png"))
            </div>
            <div id="pwFour">
                @(Html.Kendo().Button().Name("export" + Model).HtmlAttributes(new { @class = "pwWidth100" })
                                   .Content(PW.Ncels.Database.Recources.Messages.Property_Экспорт_335__00)
                                   .ImageUrl("/Content/images/export.png").Events(e => e.Click("onExportInDoc")))
            </div>
        </div>
        <div id="pwSix">
            @(Html.Kendo().Button().Name("reload" + Model).HtmlAttributes(new { @class = "pwWidth100 pwButtonReload" })
                                                    .Content("")
                               .ImageUrl("/Content/images/reload.png"))
        </div>
        @(Html.Kendo().Grid<PW.Ncels.Database.DataModel.ContractAdditionJournal>()
                                   .Name("gridContractAll" + Model).Events(conf =>
                                   {
                                       conf.DataBound("contractGridDataBounded");
                                   })
                           .Columns(columns =>
                           {
                               columns.Command(cmd => cmd.Custom("В работу").Click("takeToWorkContract")).Locked(true).Lockable(false).Title("Действие").Width(85);
                               columns.Bound(p => p.Number).Width(125).ClientTemplate(
                                   "<div class=\"btn-group btn-group-xs\" style='height:14px;margin-top: -9px;'>" +
                                        "<button type='button' style='width:90px;' class='btn btn-default btn-xs' onclick=\"openContractCard('#=Id#', '#=Number#')\"><span style=\"color:rgb(66,139,202);\">#=Number#</span></button>" +
                                    "</div>"
                                   ).Title(PW.Ncels.Database.Recources.Messages.Property_Номер_373__00).ClientFooterTemplate(PW.Ncels.Database.Recources.Messages.Property_Всего_356__00 + "#=count#").Locked(true).Lockable(false);
                               columns.Bound(p => p.CreatedDate).Format("{0:dd.MM.yyyy}").Title("Создан").Width(100);
                               columns.Bound(p => p.ContractDate).Format("{0:dd.MM.yyyy}").Title(PW.Ncels.Database.Recources.Messages.ContractAdditionDate).Width(100);
                               columns.Bound(p => p.ContractAdditionType).Title(PW.Ncels.Database.Recources.Messages.ContractAdditionType).Width(100);
                               columns.Bound(p => p.ContractNumber).Title(PW.Ncels.Database.Recources.Messages.ContractNumber).Width(100);
                               columns.Bound(p => p.StartDate).Format("{0:dd.MM.yyyy}").Title(PW.Ncels.Database.Recources.Messages.Ncels_Дата_начала_18).Width(100);
                               columns.Bound(p => p.EndDate).Format("{0:dd.MM.yyyy}").Title(PW.Ncels.Database.Recources.Messages.Ncels_Датаокончания_101).Width(100);
                               columns.Bound(p => p.IsExpired).Title(PW.Ncels.Database.Recources.Messages.Ncels_Просрочен_102).Width(100).ClientTemplate("<input  disabled='disabled' type='checkbox' #= IsExpired ? checked='checked' :'' # />");
                               columns.Bound(p => p.ManufacturerName).Title(PW.Ncels.Database.Recources.Messages.Ncels_Производитель_5).Width(100);
                               columns.Bound(p => p.ManufacturerCountry).Title(PW.Ncels.Database.Recources.Messages.Ncels_Страна_6).Width(100);
                               columns.Bound(p => p.ApplicantName).Title(PW.Ncels.Database.Recources.Messages.Ncels_Заявитель_7).Width(100);
                               columns.Bound(p => p.ApplicantCountry).Title(PW.Ncels.Database.Recources.Messages.Ncels_Страна_6).Width(100);
                               columns.Bound(p => p.ApplicantCurrency).Title(PW.Ncels.Database.Recources.Messages.Ncels_Валюта_103).Width(100);
                               columns.Bound(p => p.Login).Title(PW.Ncels.Database.Recources.Messages.Ncels_Логин_104).Width(100);
                               columns.Bound(p => p.IsSite).Title(PW.Ncels.Database.Recources.Messages.Ncels_Сайт_105).Width(100).ClientTemplate("<input  disabled='disabled' type='checkbox' #= IsSite ? checked='checked' :'' # />");
                               columns.Bound(p => p.CountApplications).Title(PW.Ncels.Database.Recources.Messages.Ncels_Заявок_106).Width(100);
                               columns.Bound(p => p.DocumentTypeName).Title(PW.Ncels.Database.Recources.Messages.Ncels_Виддокумента_107).Width(100);
                               columns.Bound(p => p.DoverennostNumber).Title(PW.Ncels.Database.Recources.Messages.Ncels_Ндокумента_108).Width(100);
                               columns.Bound(p => p.DoverennostCreatedDate).Format("{0:dd.MM.yyyy}").Title(PW.Ncels.Database.Recources.Messages.Ncels_Датавыдачи_109).Width(100);
                               columns.Bound(p => p.DoverennostExpiryDate).Format("{0:dd.MM.yyyy}").Title(PW.Ncels.Database.Recources.Messages.Ncels_Датаокончания_101).Width(100);
                           })

                           .Reorderable(reorderable => reorderable.Columns(true))
                           .Resizable(resizable => resizable.Columns(true))
                           .Sortable(sortable => sortable.AllowUnsort(false))
                           .Groupable()
                           .Scrollable(scrollable => scrollable.Virtual(true))
                                  .Filterable()

                           .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
                           .HtmlAttributes(new { @class = "pwGrid" })
                           .DataSource(dataSource => dataSource
                               .Ajax()
                               .Aggregates(aggregates => { aggregates.Add(p => p.Number).Count(); })
                               .Sort(sort => { sort.Add("Number").Descending(); sort.Add("CreatedDate").Descending(); })
                               .PageSize(20)
                               .Read(read => read.Action("ListContractAddition", "Contract"))
                           ) )
    </div>
             );
            }))
<script>
    $(document).ready(function () {
        debugger;
        resizeGrid('@("#gridContractAll" + Model)');
        $('@("#gridContractAll" + Model)').data('ModelId', '@Model');
        $('#@(ViewBag.FilterId+Model.ToString())').click();
    });
</script>
