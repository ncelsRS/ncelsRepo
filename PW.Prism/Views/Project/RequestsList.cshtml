@using PW.Ncels.Database.DataModel
@using PW.Ncels.Database.Models
@model RequestOrder
@{
    Guid emptyGuid = new Guid();
    Guid id = Model.Id == emptyGuid ? Guid.NewGuid() : Model.Id;
}

<script>
    var id = '@id.ToString()';
    function DicParams() {
        return {
            type: '@Model.OrderType',
            year: '@Model.OrderYear',
            orderId: '@Model.Id'
        };
    }


    function addRequest() {
        if ('@Model.Id' == null || '@Model.Id' == '@emptyGuid') {
            alert('Для добавления необходимо выбрать приказ');
            return;
        }
        var window = $("#TaskCommandWindow");
        window.kendoWindow({
            minHeight: 600,
            minWidth: 1200,
            modal: true,
            title: 'Добавить',
            actions: ["Close"]
        });

        window.data("kendoWindow").title('Добавить');
        window.data("kendoWindow").setOptions({
            width: 1400,
            height: 600
        });
        window.data("kendoWindow").refresh({
            url: "/Project/ListRequestOrder",
            data: { type: '@Model.OrderType', id:'@Model.Id'}
        });

        window.data("kendoWindow").center();
        window.data("kendoWindow").open();
    }

    function onRequestDestroy(e) {
        //grid = $("#Grid").data("kendoGrid");
        //dataItem = grid.dataItem($(e.srcElement).closest("tr"));
    }

    InitFilterDictionaryGrid('@id.ToString()');

    $(document).ready(function(e) {
        if ('@Model.Id' == null || '@Model.Id' == '@emptyGuid') {
            $("#addRequestButton").hide();
        }
    });
</script>



<div class="pwPanelBar">
    <div id="pwSix">
        @(Html.Kendo().Button().Name("reload" + id).HtmlAttributes(new { @class = "pwWidth100 pwButtonReload" })
            .Content("").ImageUrl("/Content/images/reload.png"))
        &nbsp;
    </div>

    <div id="pwSix1">
        @(Html.Kendo().Button().Name("export1" + id).HtmlAttributes(new { @class = "pwWidth100 pwButtonReload" })
              .Content("").Events(e => e.Click("onExportEdList"))
              .ImageUrl("/Content/images/export.png"))
    </div>
    @(Html.Kendo().Grid<RequestOrderListView>()
                                   .Name("gridListDic" + id)
                               .Columns(columns =>
                               {
                                   columns.Bound(p => p.Number).Title("Порядковый номер").Width(100).ClientFooterTemplate(PW.Ncels.Database.Recources.Messages.Property_Всего_356__00 + "#=count#");
                                   columns.Bound(p => p.AtxCode).Title("АТХ код").Width(100);
                                   columns.Bound(p => p.MnnName).Title("МНН").Width(150);
                                   columns.Bound(p => p.substance_count).Title("Состав").Width(100);
                                   columns.Bound(p => p.TradeName).Title("ТН").Width(100);
                                   columns.Bound(p => p.DrugForm).Title("Лек форма").Width(100);
                                   columns.Bound(p => p.Dosage).Title("Дозировка").Width(100);
                                   columns.Bound(p => p.Concentration).Title("Концентрация").Width(100);
                                   columns.Bound(p => p.volume).Title("Объём").Width(100);
                                   columns.Bound(p => p.box_count).Title("Фасовка").Width(100);
                                   columns.Bound(p => p.dosage_comment).Title("Комментарие к лекарственной форме").Width(100);
                                   columns.Bound(p => p.Manufacturer).Title("Производитель").Width(100);
                                   columns.Bound(p => p.Country).Title("Страна").Width(100);
                                   columns.Bound(p => p.RegNumber).Title("Рег номер ").Width(100);
                                   columns.Bound(p => p.RegDate).Title("Рег дата").Format("{0:dd.MM.yyyy}").Width(100);
                                   columns.Bound(p => p.RegDateExpire).Title("Дата истечения рег номера").Format("{0:dd.MM.yyyy}").Width(100);
                                   columns.Bound(p => p.Mark).Title("Признак").Width(100);
                                   columns.Bound(p => p.LimitPriceMnn).Title("Предельная цена за МНН").Width(100);
                                   columns.Bound(p => p.LimitPriceTn).Title("Предельная цена за ТН").Width(100);
                                   columns.Bound(p => p.Applicant).Title("Потенциальный заявитель").Width(100);
                                   columns.Bound(p => p.Status).Title("Статус").Width(100);
                                   columns.Bound(p => p.Reason).Title("Причина").Width(100);
                                   //columns.Bound(p => p.Characteristic).Title("Характеристика").Width(100);
                                   columns.Command(command => { command.Edit(); command.Destroy(); }).Width(80).Hidden(Model.Id == emptyGuid);
                               })
                            .ToolBar(toolbar =>
                                toolbar.Template("<a class='k-button k-button-icontext' id='addRequestButton' onclick='addRequest()'></span>Добавить</a>")
                            //toolbar.Custom("К заявке").Click("toApplication");
                            )
                            .Editable(editable => editable.Mode(GridEditMode.PopUp))
                            .Reorderable(reorderable => reorderable.Columns(true))
                            .Resizable(resizable => resizable.Columns(true))
                            .Scrollable(scrollable => scrollable.Virtual(true))
                            .Filterable()
                            .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
                            .HtmlAttributes(new { @class = "pwGridRef pwGridMin" })
                            .DataSource(dataSource => dataSource
                               .Ajax()
                                       .Model(model => model.Id(p => p.Id))
                                               .Aggregates(aggregates => { aggregates.Add(p => p.Number).Count(); })

                            .PageSize(50)
                            .Sort(sort => sort.Add("MnnName").Ascending())
                            .Read(read => read.Action("RequestOrderListRead", "Project").Data("DicParams"))
                            .Update(update => update.Action("RequestOrderListUpdate", "Project").Data("DicParams"))
                            .Destroy(update => update.Action("RequestOrderListDestroy", "Project").Data("DicParams"))

                           ))
</div>

<input type="hidden" id="@("typeDic" + id)" />
<script>
    resizeGrid3('@("#gridListDic" + id)', 280);



</script>
