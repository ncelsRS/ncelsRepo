@using PW.Ncels.Database.Constants
@using PW.Ncels.Database.DataModel
@using PW.Ncels.Database.Helpers
@model PW.Prism.ViewModels.OBK.OBKEntity
@{
    var currentUser = UserHelper.GetCurrentEmployee().Id;
    var controllerName = @ViewContext.RouteData.GetRequiredString("controller");
}
@helper GridToolbarTemplate()
{
    if (EmployePermissionHelper.CanSafetyAssessmentExecutorsAssignment)
    {
        <div class="pull-left">
            @( Html.Kendo().Button().Name("toWork" + Model.Guid)
                   .Content("Распределить"))
        </div>
    }
    <div class="pull-left">
        @( Html.Kendo().Button().Name("find" + Model.Guid)
               .Content(PW.Ncels.Database.Recources.Messages.Property_Найти_372__00)
               .ImageUrl("/Content/images/find.png"))
    </div>
    <div class="pull-left">
        @( Html.Kendo().Button().Name("clearSearch" + Model.Guid)
               .Content("Очистить форму поиска")
               .ImageUrl("/Content/images/clearSearch.png"))
    </div>
    <div class="pull-right">
        <div style="display: inline-block" id="columnMenu@( Model.Guid)" class="custom-grid-menu"></div>
        <div style="display: inline-block">
            @( Html.Kendo().Button().Name("reload" + Model.Guid)
                   .Content("")
                   .ImageUrl("/Content/images/reload.png"))
        </div>
    </div>
}

@(Html.Kendo().Splitter()
      .HtmlAttributes(new {@class = "pwSplitter k-block"})
      .Name(("splitter" + Model.Guid))
      .Panes(panes =>
      {
          panes.Add()
              .Size("250px")
              .Collapsible(true)
              .MaxSize("500px")
              .MinSize("250px")
              .Content(
                  @<div class="pwPanelBar">
                      @( Html.Kendo().PanelBar().HtmlAttributes(new {@class = "pwPanelBar"})
                             .Name("panelbar" + Model.Guid)
                             .ExpandMode(PanelBarExpandMode.Multiple)
                             .ExpandAll(true)
                             .HtmlAttributes(new {style = "width:auto;"})
                             .Events(e => e.Select("panelAssessmentDecalarationSelect"))
                             .Items(panelbar =>
                             {
                                 panelbar.Add().Expanded(true);
                                 panelbar.Add().Text(PW.Ncels.Database.Recources.Messages.Property_Постатусу_262__00)
                                     .Items(projects =>
                                     {
                                         if (EmployePermissionHelper.CanSafetyAssessmentExecutorsAssignment)
                                             projects.Add().Text("Новые").LinkHtmlAttributes(new Dictionary<string, object>()
                                             {
                                                 {"ItemId", OBK_Ref_StageStatus.New}, {"ItemType", "StageStatusCode"}, {"ModelId", Model.Guid.ToString()}, {"id", "new" + Model.Guid.ToString()}
                                             }).Selected(true);

                                         projects.Add().Text("В работе").LinkHtmlAttributes(new Dictionary<string, object>()
                                         {
                                             {"ItemId", OBK_Ref_StageStatus.InWork}, {"ItemType", "StageStatusCode"}, {"ModelId", Model.Guid.ToString()}, {"id", "inWork" + Model.Guid.ToString()}
                                         }).Selected(!EmployePermissionHelper.CanSafetyAssessmentExecutorsAssignment);
                                         //для экспертизы документов
                                         //todo надо добавить тип декларирования
                                         if (EmployePermissionHelper.CanSafetyAssessmentExecutorsAssignment)
                                             if (Model.DicStageId == CodeConstManager.STAGE_OBK_EXPERTISE_DOC)
                                             {
                                                 projects.Add().Text("Требует подписания").LinkHtmlAttributes(new Dictionary<string, object>()
                                                 {
                                                     {"ItemId", OBK_Ref_StageStatus.RequiresSigning}, {"ItemType", "StageStatusCode"}, {"ModelId", Model.Guid.ToString()}, {"id", "requiresSigning" + Model.Guid.ToString()}
                                                 });
                                             }
                                         projects.Add().Text("На экспертизе документов").LinkHtmlAttributes(new Dictionary<string, object>()
                                         {
                                             {"ItemId", OBK_Ref_StageStatus.OnExpDocument}, {"ItemType", "StageStatusCode"}, {"ModelId", Model.Guid.ToString()}, {"id", "onExpDocument" + Model.Guid.ToString()}
                                         });
                                         projects.Add().Text("На доработке").LinkHtmlAttributes(new Dictionary<string, object>()
                                         {
                                             {"ItemId", OBK_Ref_StageStatus.InReWork}, {"ItemType", "StageStatusCode"}, {"ModelId", Model.Guid.ToString()}, {"id", "inReWork" + Model.Guid.ToString()}
                                         });
                                         if (Model.DicStageId == CodeConstManager.STAGE_OBK_COZ)
                                         {
                                             projects.Add().Text("Требует заключения").LinkHtmlAttributes(new Dictionary<string, object>()
                                             {
                                                 {"ItemId", OBK_Ref_StageStatus.RequiresConclusion}, {"ItemType", "StageStatusCode"}, {"ModelId", Model.Guid.ToString()}, {"id", "requiresConclusion" + Model.Guid.ToString()}
                                             });
                                         }
                                         projects.Add().Text("Выполненные").LinkHtmlAttributes(new Dictionary<string, object>()
                                         {
                                             {"ItemId", OBK_Ref_StageStatus.Completed}, {"ItemType", "StageStatusCode"}, {"ModelId", Model.Guid.ToString()}, {"id", "completed" + Model.Guid.ToString()}
                                         });
                                     });
                             })
                            )
                  </div>
              );

          panes.Add().Scrollable(false).Size("100%").Content(
              @<div class="pwPanelBar">
                  @*<div class="pwBlockAdd k-block">
                      <div id="pwOne">

                      </div>
                      <div id="pwTwo">

                      </div>
                      <div id="pwFour">
                          @( Html.Kendo().Button().Name("export" + Model.Guid).HtmlAttributes(new {@class = "pwWidth100"})
                                 .Content(PW.Ncels.Database.Recources.Messages.Property_Экспорт_335__00)
                                 .ImageUrl("/Content/images/export.png").Events(e => e.Click("onExportInDoc")))
                      </div>
                  </div>*@
                  @( Html.Kendo().Grid<OBK_AssessmentDeclarationRegisterView>()
                         .Name("gridAssessmentDecalaration" + Model.Guid)
                         .Columns(columns =>
                         {
                             columns.Bound(p => p.StatusId).ClientTemplate("<input class='checkbox' type='checkbox' />").Width(24).Title("").Filterable(false).Sortable(false)
                                 .HeaderHtmlAttributes(new{@class= "not-visible-custom-column" });
                             columns.Bound(p => p.Number).Width(125).ClientTemplate(
                                 "<div class=\"btn-group btn-group-xs\" style='height:14px;margin-top: -9px;'>" +
                                 "<button  type='button' style='width:90px;' class='btn btn-default btn-xs' onclick=\"getDeclarationDetails('#=StageId#', '#=Number#','" + controllerName + "')\"><span style=\"color:rgb(66,139,202);\">#=Number#</span></button>" +
                                 "</div>"
                                 ).Title("№ заявления");
                             columns.Bound(p => p.FirstSendDate).Format("{0:dd.MM.yyyy}").Title("Дата подачи").Width(120);
                             columns.Bound(p => p.RegType).Title("Вид регистрации").Width(150);
                             columns.Bound(p => p.StatusName).Title("Статус").Width(150);
                             columns.Bound(p => p.DeclarantName).Title("Заявитель").Width(150);
                             columns.Bound(p => p.CountryNameRu).Title("Страна").Width(150);
                             columns.Bound(p => p.ContractNumber).Title("№ договора").Width(150);
                             columns.Bound(p => p.StageStatusId).Title("Кол-во продукции").Width(150);
                             //columns.Bound(p => p.NameRu).Title("Организация").Width(200).HtmlAttributes(new {@class = "need-cell-tooltip"});
                             //columns.Bound(p => p.NameRu).Title("Упаковщик").Width(200).Hidden(true).HtmlAttributes(new {@class = "need-cell-tooltip"});
                             //columns.Bound(p => p.NameRu).Title("Выпускающий контроль").Width(200).Hidden(true).HtmlAttributes(new {@class = "need-cell-tooltip"})
                             //    .HtmlAttributes(new {@class = "need-cell-tooltip"});
                         })
                         .AutoBind(false)
                         .Reorderable(reorderable => reorderable.Columns(true))
                         .Resizable(resizable => resizable.Columns(true))
                         .ToolBar(toolbar => { toolbar.Template(GridToolbarTemplate().ToHtmlString()); })
                         .Groupable()
                         .Sortable()
                         .Filterable()
                         .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
                         .Scrollable(scrollable => scrollable.Virtual(true))
                         .Pageable()
                         .HtmlAttributes(new {@class = "pwGrid"})
                         .DataSource(dataSource => dataSource
                             .Ajax()
                             .Sort(sort => { sort.Add("FirstSendDate").Descending(); })
                             .PageSize(50)
                             .Read(read => read.Action("ListRegister", "SafetyAssessment", new {type = 0, stage = Model.DicStageId}))
                         ))

              </div>
              );
      }))
<script>
    $(document).ready(function() {
        resizeGrid('@("#gridAssessmentDecalaration" + Model.Guid)');
        InitFilterOBKDecalaration('@Model.Guid.ToString()');
        $('#@((EmployePermissionHelper.CanSafetyAssessmentExecutorsAssignment ? "new":"inWork")+Model.Guid)').click();
        @*initCustomColumnMenu('@("gridAssessmentDecalaration" + Model.Guid)',
            '@("columnMenu" + Model.Guid)',
            'DrugDeclarationRegister',
            '@(currentUser)');*@
    });
</script>